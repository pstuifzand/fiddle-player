#!/usr/bin/perl -w

use strict;
use warnings;

use lib 'lib';

use Glib;
use POE qw/Loop::Glib/;

use POE::Component::Server::TCP;
use GStreamer -init;
use Data::Dumper;

use Fiddle::MusicPlayer;

my $player_session_id = Fiddle::MusicPlayer->new();

POE::Component::Server::TCP->new(
    Args  => [ $player_session_id ],

    Alias => 'tcp_server',
    Port  => 12345,

    ClientConnected => sub {
        my ($heap, $args) = @_[HEAP, ARG0];

        print "got a connection from $heap->{remote_ip}\n";
        $heap->{client}->put("connected");

        $heap->{player_session} = $args->[0];
        return;
    },
    ClientInput => sub {
        my ($client_input, $heap, $kernel, $session) = @_[ARG0, HEAP, KERNEL, SESSION];
        if ($client_input =~ m/^play\b/) {
            $kernel->post($heap->{player_session}, 'play');
            $_[HEAP]{client}->put("+ok");
        }
        elsif ($client_input =~ m/^pause\b/) {
            $kernel->post($heap->{player_session}, 'pause');
            $_[HEAP]{client}->put("+ok");
        }
        elsif ($client_input =~ m/^next\b/) {
            $kernel->post($heap->{player_session}, 'next');
            $_[HEAP]{client}->put("+ok");
        }
        elsif ($client_input =~ m/^prev\b/) {
            $kernel->post($heap->{player_session}, 'prev');
            $_[HEAP]{client}->put("+ok");
        }
        elsif ($client_input =~ m/^rate\s+(\d+)/) {
            $kernel->post($heap->{player_session}, 'rate', $1, $session->postback('rate_ok'));
        }
        elsif ($client_input =~ m/^quit\b/) {
            $kernel->post($heap->{player_session}, 'quit');
            $kernel->post('server' => "shutdown" );
        }
        elsif ($client_input =~ m/^playlist\s+(\w+)$/) {
            $kernel->post($heap->{player_session}, load_playlist => $1);
            $_[HEAP]{client}->put("+ok");
        }
        elsif ($client_input =~ m/^random\s+(on|off)$/) {
            $kernel->post($heap->{player_session}, random => ($1 eq 'on'));
            $_[HEAP]{client}->put("+ok");
        }
        elsif ($client_input =~ m/^repeat\s+(on|off)$/) {
            $kernel->post($heap->{player_session}, repeat => ($1 eq 'on'));
            $_[HEAP]{client}->put("+ok");
        }
        elsif ($client_input =~ m/^update$/) {
            $kernel->post($heap->{player_session}, 'update');
            $_[HEAP]{client}->put("+ok updating");
        }
    },
    ClientDisconnected => sub {
        print "client from $_[HEAP]{remote_ip} disconnected\n";
    },
    InlineStates => {
        rate_ok => sub {
            my ($heap, $kernel, $args) = @_[HEAP, KERNEL, ARG1];
            $heap->{client}->put("+ok rate " . $args->[0]);
        },
    },
);

POE::Kernel->run();

